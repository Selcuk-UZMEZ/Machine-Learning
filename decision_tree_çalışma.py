# -*- coding: utf-8 -*-
"""Decision-Tree çalışma.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qF5ociQ2McX0K3njXmTkN4aKNcaiWVEG
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
# %%
data = pd.read_csv('data.csv')

#%%
data.drop(['id','Unnamed: 32'],axis=1,inplace=True)
# malignant = M kötü huylu tumor
# benign = B  iyi huylu tumor

# %%
M = data[data.diagnosis == 'M']
B = data[data.diagnosis == 'B']
# scatter plot
plt.scatter(M.radius_mean,M.texture_mean,color='red',label='kotu',alpha=0.3)
plt.scatter(B.radius_mean,B.texture_mean,color='green',label='iyi',alpha=0.3)
plt.xlabel('radius_mean')
plt.ylabel('texture_mean')
plt.legend()
plt.show()

# %%
data.diagnosis = [1 if each == 'M' else 0 for each in data.diagnosis]
y = data.diagnosis.values
x_data = data.drop(['diagnosis'],axis=1)

# %%
# normalization
x = (x_data - np.min(x_data))/(np.max(x_data)-np.min(x_data))

# %%
# train test split
from sklearn.model_selection import train_test_split
x_train, x_test,y_train, y_test = train_test_split(x,y,test_size = 0.15,random_state = 42)

# && SVM

from sklearn.tree import DecisionTreeClassifier
dt = DecisionTreeClassifier()
dt.fit(x_train,y_train)

# %% test
print('score:',dt.score(x_test,y_test))

y_pred = dt.predict(x_test)
y_pred

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
confusion_matrix(y_test, y_pred)

